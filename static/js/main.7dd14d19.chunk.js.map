{"version":3,"sources":["components/Card.js","components/cardList.js","components/SearchBox.js","components/NavBar.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","cardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","NavBar","href","title","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7dd14d19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props) =>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n           <img src={`https://robohash.org/${props.id}?size=200x200`} alt='robots' />\r\n           <div>\r\n               <h2>{props.name}</h2>\r\n               <p>{props.email}</p>\r\n           </div> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst cardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                type='search' \r\n                className=' pa3 b--green bg-lightest-blue'\r\n                placeholder='Search Robots'\r\n                onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst NavBar = () => {\r\n    \r\n        return (\r\n            <header className=\"bg-black-90 w-100 ph3 pv3 pv4-ns ph4-m ph5-l\">\r\n                <nav className=\"f6 fw6 ttu tracked\">\r\n                    <a className=\"link dim white dib mr3\" href=\"#Home\" title=\"Home\">Home</a>\r\n                    <a className=\"link dim white dib mr3\" href=\"#About\" title=\"About\">About</a>\r\n                    <a className=\"link dim white dib mr3\" href=\"#Store\" title=\"Store\">Store</a>\r\n                    <a className=\"link dim white dib\" href=\"#Contact\" title=\"Contact\">Contact</a>\r\n                </nav>\r\n            </header>\r\n        )\r\n}\r\n\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style={{overflow: 'scroll', border: '1px solid', height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/cardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from './robots';\r\nimport NavBar from '../components/NavBar';\r\nimport Scroll from '../components/Scroll';\r\nimport '../containers/App.css';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state= {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users})\r\n        )}\r\n\r\n    onSearchChange = (event)=>{\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    \r\n   \r\n    render(){\r\n\r\n        const filteredRobots = this.state.robots.filter( robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n        return (\r\n        \r\n            <div className='tc'>\r\n                <NavBar />\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n               \r\n    \r\n            </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import {robots } from './robots';\n// import CardList from './cardList';\n\nReactDOM.render(\n <App/>\n , document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA;\n serviceWorker.register();\n"],"sourceRoot":""}